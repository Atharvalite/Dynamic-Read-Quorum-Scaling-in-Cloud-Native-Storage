{"ast":null,"code":"import { manager, useModalManager } from \"./chunk-474T57YK.mjs\";\n\n// src/use-modal.ts\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { hideOthers } from \"aria-hidden\";\nimport { useCallback, useEffect, useId, useMemo, useRef, useState } from \"react\";\nfunction useModal(props) {\n  const {\n    isOpen,\n    onClose,\n    id,\n    closeOnOverlayClick = true,\n    closeOnEsc = true,\n    useInert = true,\n    onOverlayClick: onOverlayClickProp,\n    onEsc\n  } = props;\n  const dialogRef = useRef(null);\n  const overlayRef = useRef(null);\n  const [dialogId, headerId, bodyId] = useIds(id, `chakra-modal`, `chakra-modal--header`, `chakra-modal--body`);\n  useAriaHidden(dialogRef, isOpen && useInert);\n  useModalManager(dialogRef, isOpen);\n  const mouseDownTarget = useRef(null);\n  const onMouseDown = useCallback(event => {\n    mouseDownTarget.current = event.target;\n  }, []);\n  const onKeyDown = useCallback(event => {\n    if (event.key === \"Escape\") {\n      event.stopPropagation();\n      if (closeOnEsc) {\n        onClose == null ? void 0 : onClose();\n      }\n      onEsc == null ? void 0 : onEsc();\n    }\n  }, [closeOnEsc, onClose, onEsc]);\n  const [headerMounted, setHeaderMounted] = useState(false);\n  const [bodyMounted, setBodyMounted] = useState(false);\n  const getDialogProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      role: \"dialog\",\n      ...props2,\n      ref: mergeRefs(ref, dialogRef),\n      id: dialogId,\n      tabIndex: -1,\n      \"aria-modal\": true,\n      \"aria-labelledby\": headerMounted ? headerId : void 0,\n      \"aria-describedby\": bodyMounted ? bodyId : void 0,\n      onClick: callAllHandlers(props2.onClick, event => event.stopPropagation())\n    };\n  }, [bodyId, bodyMounted, dialogId, headerId, headerMounted]);\n  const onOverlayClick = useCallback(event => {\n    event.stopPropagation();\n    if (mouseDownTarget.current !== event.target) return;\n    if (!manager.isTopModal(dialogRef.current)) return;\n    if (closeOnOverlayClick) {\n      onClose == null ? void 0 : onClose();\n    }\n    onOverlayClickProp == null ? void 0 : onOverlayClickProp();\n  }, [onClose, closeOnOverlayClick, onOverlayClickProp]);\n  const getDialogContainerProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      ref: mergeRefs(ref, overlayRef),\n      onClick: callAllHandlers(props2.onClick, onOverlayClick),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onMouseDown: callAllHandlers(props2.onMouseDown, onMouseDown)\n    };\n  }, [onKeyDown, onMouseDown, onOverlayClick]);\n  return {\n    isOpen,\n    onClose,\n    headerId,\n    bodyId,\n    setBodyMounted,\n    setHeaderMounted,\n    dialogRef,\n    overlayRef,\n    getDialogProps,\n    getDialogContainerProps\n  };\n}\nfunction useAriaHidden(ref, shouldHide) {\n  const currentElement = ref.current;\n  useEffect(() => {\n    if (!ref.current || !shouldHide) return void 0;\n    return hideOthers(ref.current);\n  }, [shouldHide, ref, currentElement]);\n}\nfunction useIds(idProp) {\n  for (var _len = arguments.length, prefixes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    prefixes[_key - 1] = arguments[_key];\n  }\n  const reactId = useId();\n  const id = idProp || reactId;\n  return useMemo(() => {\n    return prefixes.map(prefix => `${prefix}-${id}`);\n  }, [id, prefixes]);\n}\nexport { useModal, useAriaHidden };","map":{"version":3,"names":["manager","useModalManager","callAllHandlers","mergeRefs","hideOthers","useCallback","useEffect","useId","useMemo","useRef","useState","useModal","props","isOpen","onClose","id","closeOnOverlayClick","closeOnEsc","useInert","onOverlayClick","onOverlayClickProp","onEsc","dialogRef","overlayRef","dialogId","headerId","bodyId","useIds","useAriaHidden","mouseDownTarget","onMouseDown","event","current","target","onKeyDown","key","stopPropagation","headerMounted","setHeaderMounted","bodyMounted","setBodyMounted","getDialogProps","props2","arguments","length","undefined","ref","role","tabIndex","onClick","isTopModal","getDialogContainerProps","shouldHide","currentElement","idProp","_len","prefixes","Array","_key","reactId","map","prefix"],"sources":["/Users/harshkulkarni/Desktop/cloud_project/node_modules/@chakra-ui/modal/dist/chunk-R5DTDXZR.mjs"],"sourcesContent":["import {\n  manager,\n  useModalManager\n} from \"./chunk-474T57YK.mjs\";\n\n// src/use-modal.ts\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { hideOthers } from \"aria-hidden\";\nimport { useCallback, useEffect, useId, useMemo, useRef, useState } from \"react\";\nfunction useModal(props) {\n  const {\n    isOpen,\n    onClose,\n    id,\n    closeOnOverlayClick = true,\n    closeOnEsc = true,\n    useInert = true,\n    onOverlayClick: onOverlayClickProp,\n    onEsc\n  } = props;\n  const dialogRef = useRef(null);\n  const overlayRef = useRef(null);\n  const [dialogId, headerId, bodyId] = useIds(\n    id,\n    `chakra-modal`,\n    `chakra-modal--header`,\n    `chakra-modal--body`\n  );\n  useAriaHidden(dialogRef, isOpen && useInert);\n  useModalManager(dialogRef, isOpen);\n  const mouseDownTarget = useRef(null);\n  const onMouseDown = useCallback((event) => {\n    mouseDownTarget.current = event.target;\n  }, []);\n  const onKeyDown = useCallback(\n    (event) => {\n      if (event.key === \"Escape\") {\n        event.stopPropagation();\n        if (closeOnEsc) {\n          onClose == null ? void 0 : onClose();\n        }\n        onEsc == null ? void 0 : onEsc();\n      }\n    },\n    [closeOnEsc, onClose, onEsc]\n  );\n  const [headerMounted, setHeaderMounted] = useState(false);\n  const [bodyMounted, setBodyMounted] = useState(false);\n  const getDialogProps = useCallback(\n    (props2 = {}, ref = null) => ({\n      role: \"dialog\",\n      ...props2,\n      ref: mergeRefs(ref, dialogRef),\n      id: dialogId,\n      tabIndex: -1,\n      \"aria-modal\": true,\n      \"aria-labelledby\": headerMounted ? headerId : void 0,\n      \"aria-describedby\": bodyMounted ? bodyId : void 0,\n      onClick: callAllHandlers(\n        props2.onClick,\n        (event) => event.stopPropagation()\n      )\n    }),\n    [bodyId, bodyMounted, dialogId, headerId, headerMounted]\n  );\n  const onOverlayClick = useCallback(\n    (event) => {\n      event.stopPropagation();\n      if (mouseDownTarget.current !== event.target)\n        return;\n      if (!manager.isTopModal(dialogRef.current))\n        return;\n      if (closeOnOverlayClick) {\n        onClose == null ? void 0 : onClose();\n      }\n      onOverlayClickProp == null ? void 0 : onOverlayClickProp();\n    },\n    [onClose, closeOnOverlayClick, onOverlayClickProp]\n  );\n  const getDialogContainerProps = useCallback(\n    (props2 = {}, ref = null) => ({\n      ...props2,\n      ref: mergeRefs(ref, overlayRef),\n      onClick: callAllHandlers(props2.onClick, onOverlayClick),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onMouseDown: callAllHandlers(props2.onMouseDown, onMouseDown)\n    }),\n    [onKeyDown, onMouseDown, onOverlayClick]\n  );\n  return {\n    isOpen,\n    onClose,\n    headerId,\n    bodyId,\n    setBodyMounted,\n    setHeaderMounted,\n    dialogRef,\n    overlayRef,\n    getDialogProps,\n    getDialogContainerProps\n  };\n}\nfunction useAriaHidden(ref, shouldHide) {\n  const currentElement = ref.current;\n  useEffect(() => {\n    if (!ref.current || !shouldHide)\n      return void 0;\n    return hideOthers(ref.current);\n  }, [shouldHide, ref, currentElement]);\n}\nfunction useIds(idProp, ...prefixes) {\n  const reactId = useId();\n  const id = idProp || reactId;\n  return useMemo(() => {\n    return prefixes.map((prefix) => `${prefix}-${id}`);\n  }, [id, prefixes]);\n}\n\nexport {\n  useModal,\n  useAriaHidden\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}