{"ast":null,"code":"import { ColorModeContext } from \"./chunk-7NLW6UB6.mjs\";\nimport { getColorModeUtils } from \"./chunk-QTTMAIIW.mjs\";\nimport { localStorageManager } from \"./chunk-BWTZURQV.mjs\";\n\n// src/color-mode-provider.tsx\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar noop = () => {};\nfunction getTheme(manager, fallback) {\n  return manager.type === \"cookie\" && manager.ssr ? manager.get(fallback) : fallback;\n}\nfunction ColorModeProvider(props) {\n  const {\n    value,\n    children,\n    options: {\n      useSystemColorMode,\n      initialColorMode,\n      disableTransitionOnChange\n    } = {},\n    colorModeManager = localStorageManager\n  } = props;\n  const defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\";\n  const [colorMode, rawSetColorMode] = useState(() => getTheme(colorModeManager, defaultColorMode));\n  const [resolvedColorMode, setResolvedColorMode] = useState(() => getTheme(colorModeManager));\n  const {\n    getSystemTheme,\n    setClassName,\n    setDataset,\n    addListener\n  } = useMemo(() => getColorModeUtils({\n    preventTransition: disableTransitionOnChange\n  }), [disableTransitionOnChange]);\n  const resolvedValue = initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode;\n  const setColorMode = useCallback(value2 => {\n    const resolved = value2 === \"system\" ? getSystemTheme() : value2;\n    rawSetColorMode(resolved);\n    setClassName(resolved === \"dark\");\n    setDataset(resolved);\n    colorModeManager.set(resolved);\n  }, [colorModeManager, getSystemTheme, setClassName, setDataset]);\n  useSafeLayoutEffect(() => {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme());\n    }\n  }, []);\n  useEffect(() => {\n    const managerValue = colorModeManager.get();\n    if (managerValue) {\n      setColorMode(managerValue);\n      return;\n    }\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\");\n      return;\n    }\n    setColorMode(defaultColorMode);\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);\n  const toggleColorMode = useCallback(() => {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\");\n  }, [resolvedValue, setColorMode]);\n  useEffect(() => {\n    if (!useSystemColorMode) return;\n    return addListener(setColorMode);\n  }, [useSystemColorMode, addListener, setColorMode]);\n  const context = useMemo(() => ({\n    colorMode: value != null ? value : resolvedValue,\n    toggleColorMode: value ? noop : toggleColorMode,\n    setColorMode: value ? noop : setColorMode,\n    forced: value !== void 0\n  }), [resolvedValue, toggleColorMode, setColorMode, value]);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    children\n  });\n}\nColorModeProvider.displayName = \"ColorModeProvider\";\nfunction DarkMode(props) {\n  const context = useMemo(() => ({\n    colorMode: \"dark\",\n    toggleColorMode: noop,\n    setColorMode: noop,\n    forced: true\n  }), []);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    ...props\n  });\n}\nDarkMode.displayName = \"DarkMode\";\nfunction LightMode(props) {\n  const context = useMemo(() => ({\n    colorMode: \"light\",\n    toggleColorMode: noop,\n    setColorMode: noop,\n    forced: true\n  }), []);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    ...props\n  });\n}\nLightMode.displayName = \"LightMode\";\nexport { ColorModeProvider, DarkMode, LightMode };","map":{"version":3,"names":["ColorModeContext","getColorModeUtils","localStorageManager","useSafeLayoutEffect","useCallback","useEffect","useMemo","useState","jsx","noop","getTheme","manager","fallback","type","ssr","get","ColorModeProvider","props","value","children","options","useSystemColorMode","initialColorMode","disableTransitionOnChange","colorModeManager","defaultColorMode","colorMode","rawSetColorMode","resolvedColorMode","setResolvedColorMode","getSystemTheme","setClassName","setDataset","addListener","preventTransition","resolvedValue","setColorMode","value2","resolved","set","managerValue","toggleColorMode","context","forced","Provider","displayName","DarkMode","LightMode"],"sources":["/Users/harshkulkarni/Desktop/cloud_project/node_modules/@chakra-ui/color-mode/dist/chunk-4DEUOPYU.mjs"],"sourcesContent":["import {\n  ColorModeContext\n} from \"./chunk-7NLW6UB6.mjs\";\nimport {\n  getColorModeUtils\n} from \"./chunk-QTTMAIIW.mjs\";\nimport {\n  localStorageManager\n} from \"./chunk-BWTZURQV.mjs\";\n\n// src/color-mode-provider.tsx\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar noop = () => {\n};\nfunction getTheme(manager, fallback) {\n  return manager.type === \"cookie\" && manager.ssr ? manager.get(fallback) : fallback;\n}\nfunction ColorModeProvider(props) {\n  const {\n    value,\n    children,\n    options: {\n      useSystemColorMode,\n      initialColorMode,\n      disableTransitionOnChange\n    } = {},\n    colorModeManager = localStorageManager\n  } = props;\n  const defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\";\n  const [colorMode, rawSetColorMode] = useState(\n    () => getTheme(colorModeManager, defaultColorMode)\n  );\n  const [resolvedColorMode, setResolvedColorMode] = useState(\n    () => getTheme(colorModeManager)\n  );\n  const { getSystemTheme, setClassName, setDataset, addListener } = useMemo(\n    () => getColorModeUtils({ preventTransition: disableTransitionOnChange }),\n    [disableTransitionOnChange]\n  );\n  const resolvedValue = initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode;\n  const setColorMode = useCallback(\n    (value2) => {\n      const resolved = value2 === \"system\" ? getSystemTheme() : value2;\n      rawSetColorMode(resolved);\n      setClassName(resolved === \"dark\");\n      setDataset(resolved);\n      colorModeManager.set(resolved);\n    },\n    [colorModeManager, getSystemTheme, setClassName, setDataset]\n  );\n  useSafeLayoutEffect(() => {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme());\n    }\n  }, []);\n  useEffect(() => {\n    const managerValue = colorModeManager.get();\n    if (managerValue) {\n      setColorMode(managerValue);\n      return;\n    }\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\");\n      return;\n    }\n    setColorMode(defaultColorMode);\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);\n  const toggleColorMode = useCallback(() => {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\");\n  }, [resolvedValue, setColorMode]);\n  useEffect(() => {\n    if (!useSystemColorMode)\n      return;\n    return addListener(setColorMode);\n  }, [useSystemColorMode, addListener, setColorMode]);\n  const context = useMemo(\n    () => ({\n      colorMode: value != null ? value : resolvedValue,\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode,\n      forced: value !== void 0\n    }),\n    [resolvedValue, toggleColorMode, setColorMode, value]\n  );\n  return /* @__PURE__ */ jsx(ColorModeContext.Provider, { value: context, children });\n}\nColorModeProvider.displayName = \"ColorModeProvider\";\nfunction DarkMode(props) {\n  const context = useMemo(\n    () => ({\n      colorMode: \"dark\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true\n    }),\n    []\n  );\n  return /* @__PURE__ */ jsx(ColorModeContext.Provider, { value: context, ...props });\n}\nDarkMode.displayName = \"DarkMode\";\nfunction LightMode(props) {\n  const context = useMemo(\n    () => ({\n      colorMode: \"light\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true\n    }),\n    []\n  );\n  return /* @__PURE__ */ jsx(ColorModeContext.Provider, { value: context, ...props });\n}\nLightMode.displayName = \"LightMode\";\n\nexport {\n  ColorModeProvider,\n  DarkMode,\n  LightMode\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}