{"ast":null,"code":"// src/providers.tsx\nimport { useColorMode } from \"@chakra-ui/color-mode\";\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport { css, toCSSVar } from \"@chakra-ui/styled-system\";\nimport { memoizedGet as get, runIfFn } from \"@chakra-ui/utils\";\nimport { Global, ThemeProvider as EmotionThemeProvider } from \"@emotion/react\";\nimport { useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nfunction ThemeProvider(props) {\n  const {\n    cssVarsRoot,\n    theme,\n    children\n  } = props;\n  const computedTheme = useMemo(() => toCSSVar(theme), [theme]);\n  return /* @__PURE__ */jsxs(EmotionThemeProvider, {\n    theme: computedTheme,\n    children: [/* @__PURE__ */jsx(CSSVars, {\n      root: cssVarsRoot\n    }), children]\n  });\n}\nfunction CSSVars(_ref) {\n  let {\n    root = \":host, :root\"\n  } = _ref;\n  const selector = [root, `[data-theme]`].join(\",\");\n  return /* @__PURE__ */jsx(Global, {\n    styles: theme => ({\n      [selector]: theme.__cssVars\n    })\n  });\n}\nvar [StylesProvider, useStyles] = createContext({\n  name: \"StylesContext\",\n  errorMessage: \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \"\n});\nfunction createStylesContext(componentName) {\n  return createContext({\n    name: `${componentName}StylesContext`,\n    errorMessage: `useStyles: \"styles\" is undefined. Seems you forgot to wrap the components in \"<${componentName} />\" `\n  });\n}\nfunction GlobalStyle() {\n  const {\n    colorMode\n  } = useColorMode();\n  return /* @__PURE__ */jsx(Global, {\n    styles: theme => {\n      const styleObjectOrFn = get(theme, \"styles.global\");\n      const globalStyles = runIfFn(styleObjectOrFn, {\n        theme,\n        colorMode\n      });\n      if (!globalStyles) return void 0;\n      const styles = css(globalStyles)(theme);\n      return styles;\n    }\n  });\n}\nexport { ThemeProvider, CSSVars, StylesProvider, useStyles, createStylesContext, GlobalStyle };","map":{"version":3,"names":["useColorMode","createContext","css","toCSSVar","memoizedGet","get","runIfFn","Global","ThemeProvider","EmotionThemeProvider","useMemo","jsx","jsxs","props","cssVarsRoot","theme","children","computedTheme","CSSVars","root","_ref","selector","join","styles","__cssVars","StylesProvider","useStyles","name","errorMessage","createStylesContext","componentName","GlobalStyle","colorMode","styleObjectOrFn","globalStyles"],"sources":["/Users/harshkulkarni/Desktop/cloud_project/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs"],"sourcesContent":["// src/providers.tsx\nimport { useColorMode } from \"@chakra-ui/color-mode\";\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport { css, toCSSVar } from \"@chakra-ui/styled-system\";\nimport { memoizedGet as get, runIfFn } from \"@chakra-ui/utils\";\nimport {\n  Global,\n  ThemeProvider as EmotionThemeProvider\n} from \"@emotion/react\";\nimport { useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nfunction ThemeProvider(props) {\n  const { cssVarsRoot, theme, children } = props;\n  const computedTheme = useMemo(() => toCSSVar(theme), [theme]);\n  return /* @__PURE__ */ jsxs(EmotionThemeProvider, { theme: computedTheme, children: [\n    /* @__PURE__ */ jsx(CSSVars, { root: cssVarsRoot }),\n    children\n  ] });\n}\nfunction CSSVars({ root = \":host, :root\" }) {\n  const selector = [root, `[data-theme]`].join(\",\");\n  return /* @__PURE__ */ jsx(Global, { styles: (theme) => ({ [selector]: theme.__cssVars }) });\n}\nvar [StylesProvider, useStyles] = createContext({\n  name: \"StylesContext\",\n  errorMessage: \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \"\n});\nfunction createStylesContext(componentName) {\n  return createContext({\n    name: `${componentName}StylesContext`,\n    errorMessage: `useStyles: \"styles\" is undefined. Seems you forgot to wrap the components in \"<${componentName} />\" `\n  });\n}\nfunction GlobalStyle() {\n  const { colorMode } = useColorMode();\n  return /* @__PURE__ */ jsx(\n    Global,\n    {\n      styles: (theme) => {\n        const styleObjectOrFn = get(theme, \"styles.global\");\n        const globalStyles = runIfFn(styleObjectOrFn, { theme, colorMode });\n        if (!globalStyles)\n          return void 0;\n        const styles = css(globalStyles)(theme);\n        return styles;\n      }\n    }\n  );\n}\n\nexport {\n  ThemeProvider,\n  CSSVars,\n  StylesProvider,\n  useStyles,\n  createStylesContext,\n  GlobalStyle\n};\n"],"mappings":"AAAA;AACA,SAASA,YAAY,QAAQ,uBAAuB;AACpD,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,GAAG,EAAEC,QAAQ,QAAQ,0BAA0B;AACxD,SAASC,WAAW,IAAIC,GAAG,EAAEC,OAAO,QAAQ,kBAAkB;AAC9D,SACEC,MAAM,EACNC,aAAa,IAAIC,oBAAoB,QAChC,gBAAgB;AACvB,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,GAAG,EAAEC,IAAI,QAAQ,mBAAmB;AAC7C,SAASJ,aAAaA,CAACK,KAAK,EAAE;EAC5B,MAAM;IAAEC,WAAW;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGH,KAAK;EAC9C,MAAMI,aAAa,GAAGP,OAAO,CAAC,MAAMP,QAAQ,CAACY,KAAK,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAC7D,OAAO,eAAgBH,IAAI,CAACH,oBAAoB,EAAE;IAAEM,KAAK,EAAEE,aAAa;IAAED,QAAQ,EAAE,CAClF,eAAgBL,GAAG,CAACO,OAAO,EAAE;MAAEC,IAAI,EAAEL;IAAY,CAAC,CAAC,EACnDE,QAAQ;EACR,CAAC,CAAC;AACN;AACA,SAASE,OAAOA,CAAAE,IAAA,EAA4B;EAAA,IAA3B;IAAED,IAAI,GAAG;EAAe,CAAC,GAAAC,IAAA;EACxC,MAAMC,QAAQ,GAAG,CAACF,IAAI,EAAG,cAAa,CAAC,CAACG,IAAI,CAAC,GAAG,CAAC;EACjD,OAAO,eAAgBX,GAAG,CAACJ,MAAM,EAAE;IAAEgB,MAAM,EAAGR,KAAK,KAAM;MAAE,CAACM,QAAQ,GAAGN,KAAK,CAACS;IAAU,CAAC;EAAE,CAAC,CAAC;AAC9F;AACA,IAAI,CAACC,cAAc,EAAEC,SAAS,CAAC,GAAGzB,aAAa,CAAC;EAC9C0B,IAAI,EAAE,eAAe;EACrBC,YAAY,EAAE;AAChB,CAAC,CAAC;AACF,SAASC,mBAAmBA,CAACC,aAAa,EAAE;EAC1C,OAAO7B,aAAa,CAAC;IACnB0B,IAAI,EAAG,GAAEG,aAAc,eAAc;IACrCF,YAAY,EAAG,kFAAiFE,aAAc;EAChH,CAAC,CAAC;AACJ;AACA,SAASC,WAAWA,CAAA,EAAG;EACrB,MAAM;IAAEC;EAAU,CAAC,GAAGhC,YAAY,EAAE;EACpC,OAAO,eAAgBW,GAAG,CACxBJ,MAAM,EACN;IACEgB,MAAM,EAAGR,KAAK,IAAK;MACjB,MAAMkB,eAAe,GAAG5B,GAAG,CAACU,KAAK,EAAE,eAAe,CAAC;MACnD,MAAMmB,YAAY,GAAG5B,OAAO,CAAC2B,eAAe,EAAE;QAAElB,KAAK;QAAEiB;MAAU,CAAC,CAAC;MACnE,IAAI,CAACE,YAAY,EACf,OAAO,KAAK,CAAC;MACf,MAAMX,MAAM,GAAGrB,GAAG,CAACgC,YAAY,CAAC,CAACnB,KAAK,CAAC;MACvC,OAAOQ,MAAM;IACf;EACF,CAAC,CACF;AACH;AAEA,SACEf,aAAa,EACbU,OAAO,EACPO,cAAc,EACdC,SAAS,EACTG,mBAAmB,EACnBE,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}