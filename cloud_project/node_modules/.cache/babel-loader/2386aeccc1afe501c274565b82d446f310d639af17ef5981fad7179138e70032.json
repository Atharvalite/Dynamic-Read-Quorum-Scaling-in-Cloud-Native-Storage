{"ast":null,"code":"// src/use-checkbox-group.ts\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { isObject } from \"@chakra-ui/shared-utils\";\nimport { useCallback } from \"react\";\nfunction isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n}\nfunction useCheckboxGroup() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    defaultValue,\n    value: valueProp,\n    onChange,\n    isDisabled,\n    isNative\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp\n  });\n  const handleChange = useCallback(eventOrValue => {\n    if (!value) return;\n    const isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);\n    const selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    const nextValue = isChecked ? [...value, selectedValue] : value.filter(v => String(v) !== String(selectedValue));\n    setValue(nextValue);\n  }, [setValue, value]);\n  const getCheckboxProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return {\n      ...props2,\n      [checkedKey]: value.some(val => String(props2.value) === String(val)),\n      onChange: handleChange\n    };\n  }, [handleChange, isNative, value]);\n  return {\n    value,\n    isDisabled,\n    onChange: handleChange,\n    setValue,\n    getCheckboxProps\n  };\n}\nexport { useCheckboxGroup };","map":{"version":3,"names":["useCallbackRef","useControllableState","isObject","useCallback","isInputEvent","value","target","useCheckboxGroup","props","arguments","length","undefined","defaultValue","valueProp","onChange","isDisabled","isNative","onChangeProp","setValue","handleChange","eventOrValue","isChecked","checked","includes","selectedValue","nextValue","filter","v","String","getCheckboxProps","props2","checkedKey","some","val"],"sources":["/Users/harshkulkarni/Desktop/cloud_project/node_modules/@chakra-ui/checkbox/dist/chunk-5F7ST2TT.mjs"],"sourcesContent":["// src/use-checkbox-group.ts\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { isObject } from \"@chakra-ui/shared-utils\";\nimport { useCallback } from \"react\";\nfunction isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n}\nfunction useCheckboxGroup(props = {}) {\n  const {\n    defaultValue,\n    value: valueProp,\n    onChange,\n    isDisabled,\n    isNative\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp\n  });\n  const handleChange = useCallback(\n    (eventOrValue) => {\n      if (!value)\n        return;\n      const isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);\n      const selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n      const nextValue = isChecked ? [...value, selectedValue] : value.filter((v) => String(v) !== String(selectedValue));\n      setValue(nextValue);\n    },\n    [setValue, value]\n  );\n  const getCheckboxProps = useCallback(\n    (props2 = {}) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\";\n      return {\n        ...props2,\n        [checkedKey]: value.some((val) => String(props2.value) === String(val)),\n        onChange: handleChange\n      };\n    },\n    [handleChange, isNative, value]\n  );\n  return {\n    value,\n    isDisabled,\n    onChange: handleChange,\n    setValue,\n    getCheckboxProps\n  };\n}\n\nexport {\n  useCheckboxGroup\n};\n"],"mappings":"AAAA;AACA,SAASA,cAAc,QAAQ,mCAAmC;AAClE,SAASC,oBAAoB,QAAQ,yCAAyC;AAC9E,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,SAASC,WAAW,QAAQ,OAAO;AACnC,SAASC,YAAYA,CAACC,KAAK,EAAE;EAC3B,OAAOA,KAAK,IAAIH,QAAQ,CAACG,KAAK,CAAC,IAAIH,QAAQ,CAACG,KAAK,CAACC,MAAM,CAAC;AAC3D;AACA,SAASC,gBAAgBA,CAAA,EAAa;EAAA,IAAZC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAClC,MAAM;IACJG,YAAY;IACZP,KAAK,EAAEQ,SAAS;IAChBC,QAAQ;IACRC,UAAU;IACVC;EACF,CAAC,GAAGR,KAAK;EACT,MAAMS,YAAY,GAAGjB,cAAc,CAACc,QAAQ,CAAC;EAC7C,MAAM,CAACT,KAAK,EAAEa,QAAQ,CAAC,GAAGjB,oBAAoB,CAAC;IAC7CI,KAAK,EAAEQ,SAAS;IAChBD,YAAY,EAAEA,YAAY,IAAI,EAAE;IAChCE,QAAQ,EAAEG;EACZ,CAAC,CAAC;EACF,MAAME,YAAY,GAAGhB,WAAW,CAC7BiB,YAAY,IAAK;IAChB,IAAI,CAACf,KAAK,EACR;IACF,MAAMgB,SAAS,GAAGjB,YAAY,CAACgB,YAAY,CAAC,GAAGA,YAAY,CAACd,MAAM,CAACgB,OAAO,GAAG,CAACjB,KAAK,CAACkB,QAAQ,CAACH,YAAY,CAAC;IAC1G,MAAMI,aAAa,GAAGpB,YAAY,CAACgB,YAAY,CAAC,GAAGA,YAAY,CAACd,MAAM,CAACD,KAAK,GAAGe,YAAY;IAC3F,MAAMK,SAAS,GAAGJ,SAAS,GAAG,CAAC,GAAGhB,KAAK,EAAEmB,aAAa,CAAC,GAAGnB,KAAK,CAACqB,MAAM,CAAEC,CAAC,IAAKC,MAAM,CAACD,CAAC,CAAC,KAAKC,MAAM,CAACJ,aAAa,CAAC,CAAC;IAClHN,QAAQ,CAACO,SAAS,CAAC;EACrB,CAAC,EACD,CAACP,QAAQ,EAAEb,KAAK,CAAC,CAClB;EACD,MAAMwB,gBAAgB,GAAG1B,WAAW,CAClC,YAAiB;IAAA,IAAhB2B,MAAM,GAAArB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACV,MAAMsB,UAAU,GAAGf,QAAQ,GAAG,SAAS,GAAG,WAAW;IACrD,OAAO;MACL,GAAGc,MAAM;MACT,CAACC,UAAU,GAAG1B,KAAK,CAAC2B,IAAI,CAAEC,GAAG,IAAKL,MAAM,CAACE,MAAM,CAACzB,KAAK,CAAC,KAAKuB,MAAM,CAACK,GAAG,CAAC,CAAC;MACvEnB,QAAQ,EAAEK;IACZ,CAAC;EACH,CAAC,EACD,CAACA,YAAY,EAAEH,QAAQ,EAAEX,KAAK,CAAC,CAChC;EACD,OAAO;IACLA,KAAK;IACLU,UAAU;IACVD,QAAQ,EAAEK,YAAY;IACtBD,QAAQ;IACRW;EACF,CAAC;AACH;AAEA,SACEtB,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}