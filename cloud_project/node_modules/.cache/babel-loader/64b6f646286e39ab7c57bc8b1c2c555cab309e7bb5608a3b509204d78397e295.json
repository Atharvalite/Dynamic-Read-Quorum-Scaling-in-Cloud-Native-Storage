{"ast":null,"code":"import { useMediaQuery } from \"./chunk-MG6WC47T.mjs\";\n\n// src/use-breakpoint.ts\nimport { useTheme } from \"@chakra-ui/system\";\nimport { isObject } from \"@chakra-ui/shared-utils\";\nfunction useBreakpoint(arg) {\n  var _a, _b;\n  const opts = isObject(arg) ? arg : {\n    fallback: arg != null ? arg : \"base\"\n  };\n  const theme = useTheme();\n  const breakpoints = theme.__breakpoints.details.map(_ref => {\n    let {\n      minMaxQuery,\n      breakpoint\n    } = _ref;\n    return {\n      breakpoint,\n      query: minMaxQuery.replace(\"@media screen and \", \"\")\n    };\n  });\n  const fallback = breakpoints.map(bp => bp.breakpoint === opts.fallback);\n  const values = useMediaQuery(breakpoints.map(bp => bp.query), {\n    fallback,\n    ssr: opts.ssr\n  });\n  const index = values.findIndex(value => value == true);\n  return (_b = (_a = breakpoints[index]) == null ? void 0 : _a.breakpoint) != null ? _b : opts.fallback;\n}\nexport { useBreakpoint };","map":{"version":3,"names":["useMediaQuery","useTheme","isObject","useBreakpoint","arg","_a","_b","opts","fallback","theme","breakpoints","__breakpoints","details","map","_ref","minMaxQuery","breakpoint","query","replace","bp","values","ssr","index","findIndex","value"],"sources":["/Users/harshkulkarni/Desktop/cloud_project/node_modules/@chakra-ui/media-query/dist/chunk-CI3LDA6F.mjs"],"sourcesContent":["import {\n  useMediaQuery\n} from \"./chunk-MG6WC47T.mjs\";\n\n// src/use-breakpoint.ts\nimport { useTheme } from \"@chakra-ui/system\";\nimport { isObject } from \"@chakra-ui/shared-utils\";\nfunction useBreakpoint(arg) {\n  var _a, _b;\n  const opts = isObject(arg) ? arg : { fallback: arg != null ? arg : \"base\" };\n  const theme = useTheme();\n  const breakpoints = theme.__breakpoints.details.map(\n    ({ minMaxQuery, breakpoint }) => ({\n      breakpoint,\n      query: minMaxQuery.replace(\"@media screen and \", \"\")\n    })\n  );\n  const fallback = breakpoints.map((bp) => bp.breakpoint === opts.fallback);\n  const values = useMediaQuery(\n    breakpoints.map((bp) => bp.query),\n    { fallback, ssr: opts.ssr }\n  );\n  const index = values.findIndex((value) => value == true);\n  return (_b = (_a = breakpoints[index]) == null ? void 0 : _a.breakpoint) != null ? _b : opts.fallback;\n}\n\nexport {\n  useBreakpoint\n};\n"],"mappings":"AAAA,SACEA,aAAa,QACR,sBAAsB;;AAE7B;AACA,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,SAASC,aAAaA,CAACC,GAAG,EAAE;EAC1B,IAAIC,EAAE,EAAEC,EAAE;EACV,MAAMC,IAAI,GAAGL,QAAQ,CAACE,GAAG,CAAC,GAAGA,GAAG,GAAG;IAAEI,QAAQ,EAAEJ,GAAG,IAAI,IAAI,GAAGA,GAAG,GAAG;EAAO,CAAC;EAC3E,MAAMK,KAAK,GAAGR,QAAQ,EAAE;EACxB,MAAMS,WAAW,GAAGD,KAAK,CAACE,aAAa,CAACC,OAAO,CAACC,GAAG,CACjDC,IAAA;IAAA,IAAC;MAAEC,WAAW;MAAEC;IAAW,CAAC,GAAAF,IAAA;IAAA,OAAM;MAChCE,UAAU;MACVC,KAAK,EAAEF,WAAW,CAACG,OAAO,CAAC,oBAAoB,EAAE,EAAE;IACrD,CAAC;EAAA,CAAC,CACH;EACD,MAAMV,QAAQ,GAAGE,WAAW,CAACG,GAAG,CAAEM,EAAE,IAAKA,EAAE,CAACH,UAAU,KAAKT,IAAI,CAACC,QAAQ,CAAC;EACzE,MAAMY,MAAM,GAAGpB,aAAa,CAC1BU,WAAW,CAACG,GAAG,CAAEM,EAAE,IAAKA,EAAE,CAACF,KAAK,CAAC,EACjC;IAAET,QAAQ;IAAEa,GAAG,EAAEd,IAAI,CAACc;EAAI,CAAC,CAC5B;EACD,MAAMC,KAAK,GAAGF,MAAM,CAACG,SAAS,CAAEC,KAAK,IAAKA,KAAK,IAAI,IAAI,CAAC;EACxD,OAAO,CAAClB,EAAE,GAAG,CAACD,EAAE,GAAGK,WAAW,CAACY,KAAK,CAAC,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGjB,EAAE,CAACW,UAAU,KAAK,IAAI,GAAGV,EAAE,GAAGC,IAAI,CAACC,QAAQ;AACvG;AAEA,SACEL,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}